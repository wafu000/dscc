//token ring UDP chat client
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;

public class UDPChatClient {
    DatagramSocket udpClientSocket;
    int port;
    
    public UDPChatClient(int port) {
        this.port = port;
    }
    
    public void sendReq() {
    	InetAddress serverAddress;
        String in;
        
        try {
        	udpClientSocket = new DatagramSocket();
        	InetAddress host = InetAddress.getLocalHost();
	        serverAddress = InetAddress.getByName(host.getHostName());
	        
	        BufferedReader keyRead = new BufferedReader(new InputStreamReader(System.in));
	        System.out.println("UDP Client-1 started at " + InetAddress.getLocalHost());
        
	        while (true) {
	        	System.out.println("Enter message for server: ");
	            in = keyRead.readLine();
	            DatagramPacket sndPacket = new DatagramPacket(in.getBytes(), in.getBytes().length, serverAddress, port);
	            udpClientSocket.send(sndPacket);
	            
	            if(in.equalsIgnoreCase("bye"))
	            	break;
	            
	            byte[] buf = new byte[1024];
	            DatagramPacket recPacket = new DatagramPacket(buf, buf.length);
	            udpClientSocket.receive(recPacket);
	            String msg = new String(recPacket.getData()).trim();

	            System.out.println("Message from " + recPacket.getAddress().getHostAddress() + ": " + msg);
	        }
        }
        catch(Exception e) {
        	System.out.println(e.getMessage());
		}
        finally {
        	udpClientSocket.close();
        }
    }
    
    public static void main(String[] args) {        
    	UDPChatClient sender = new UDPChatClient(5000);
        sender.sendReq();
        
    }
}

//udp chat server
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.io.BufferedReader;
import java.io.InputStreamReader;

public class UDPChatSrv {
    public DatagramSocket udpSrvSocket;
    public int port;
    String in;
 
    public UDPChatSrv(int port) {
        this.port = port;
    }
    
    private void listen() {
    	try {
	    	udpSrvSocket = new DatagramSocket(port);
	    	BufferedReader keyRead = new BufferedReader(new InputStreamReader(System.in));
	    	String msg;
	    	int [] clientPortA = new int[2];
	    	InetAddress clientAddress;
        	int clientPort, clientCnt = 0;
        	int tokenTo = -1, currentClient = -1;
            DatagramPacket recPacket, sndPacket;
	        System.out.println("Server started at " + InetAddress.getLocalHost());
	        
	        while (true) {
	        	byte[] buf = new byte[1024];
	        	//System.out.println("while @server");
	            recPacket = new DatagramPacket(buf, buf.length);
	            
	            // blocks until a packet is received
	            udpSrvSocket.receive(recPacket);
	            msg = new String(recPacket.getData()).trim();
	            clientAddress = recPacket.getAddress();
	            clientPort = recPacket.getPort();
	            
	            boolean clientPortPresent = false;
	            int i;
	            for(i = 0; i < clientPortA.length; i++) {
	            	if(clientPortA[i] == clientPort) {
	            		clientPortPresent = true;
	            		currentClient = i;
	            		break;
	            	}
	            }
	            if(clientPortPresent == false) {
	            	clientPortA[clientCnt] = clientPort;
	            	currentClient = clientCnt;
	            	clientCnt++;
	            }
	            //System.out.println("Message from client " + currentClient + ": " + msg);
	            
	            if(tokenTo == -1 && clientCnt == 1) {
            		tokenTo = 0;	//Assign token to 1st client in d list
            		System.out.println("send Message :- Token assigned to client " + currentClient);
	            	in = "Token assigned";
	            	sndPacket = new DatagramPacket(in.getBytes(), in.getBytes().length, clientAddress, clientPortA[currentClient]);
	            	udpSrvSocket.send(sndPacket);
	            }
	        //1. token is wth 0th client in d list => clientCnt=1
            //2. client send msg token => either he wants it or return it.
            //3. if he wants chk who has d token n reply accordingly
            //3.1 if token is wth 1 n 2 wants then deny
	        //3.2 token msg arrived at server, current client n tokenTo are same
	            //3.2 so remove token frm current n assign it to nxt
            //4. if he returns it then assign it nxt in list      
	      
	            if(msg.contains("token")) {
	            	if(tokenTo == currentClient) {
	            		if(clientPortA.length == tokenTo)
	            			tokenTo = 0;
	            		else
	            			tokenTo++;
	            		System.out.println("send Message :- Token assigned to client " + currentClient);
		            	//in = keyRead.readLine();
		            	in = "Token assigned";
		            	sndPacket = new DatagramPacket(in.getBytes(), in.getBytes().length, clientAddress, clientPortA[tokenTo]);
		            	udpSrvSocket.send(sndPacket);
	            	}
	            	else {
	            		System.out.println("send Message :- ");
		            	//in = keyRead.readLine();
		            	in = "Token is with Client - " + tokenTo +". Wait for your turn.";
		            	sndPacket = new DatagramPacket(in.getBytes(), in.getBytes().length, clientAddress, clientPortA[currentClient]);
		            	udpSrvSocket.send(sndPacket);
	            	}
	            }
	            else {
	            	if(currentClient == tokenTo) {
		            	System.out.println("send Message :- ");
		            	in = keyRead.readLine();
		            	//in = "Token assigned";
		            	sndPacket = new DatagramPacket(in.getBytes(), in.getBytes().length, clientAddress, clientPortA[currentClient]);
		            	udpSrvSocket.send(sndPacket);
	            	}
	            	else{
	            		System.out.println("send Message :- ");
		            	//in = keyRead.readLine();
		            	in = "Token is with Client - " + tokenTo +". Wait for your turn.";
		            	sndPacket = new DatagramPacket(in.getBytes(), in.getBytes().length, clientAddress, clientPortA[currentClient]);
		            	udpSrvSocket.send(sndPacket);
	            	}
	            		
	            }    
	            /*if(msg.equalsIgnoreCase("bye"))
	            	clientCnt--;
	            */
	        }
    	}
        catch(Exception e) {
        	System.out.println(e.getMessage());
        }
    	finally {
    		udpSrvSocket.close();
    	}
    }
    
    public static void main(String[] args) {
    	UDPChatSrv client = new UDPChatSrv(5000);
        client.listen();
    }
}